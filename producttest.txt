/* // READ PRODUCT
    describe('GET /product', () => {

        // READ PRODUCT SUCCESS
        describe('READ PRODUCTS SUCCESS', () => {

            test('SHOULD SEND AN OBJECT(NAME, IMAGE_URL, PRICE, STOCK) WITH STATUS CODE 200', (done) => {
                request(app)
                    .get('/products')
                    .send({
                        headers: {
                            // token: sampleToken
                            token: testToken
                        }
                    })
                    .end((err, res) => {
                        console.log("FOUND ALL TEST PRODUCTS!");
                        // console.log(res);
                        console.log("RES BODY");
                        console.log(res.body);
                        expect(res.status).toBe(200)
                        expect(res.body).toHaveProperty("data", expect.any(Array))
                        expect(res.body.data.length).toBeGreaterThan(0)
                        done()
                    })

            })

        })


        // READ PRODUCT FAILS: NO TOKEN
        describe('READ PRODUCT FAILS', () => {

            test('SHOULD SEND AN ERROR 400 BECAUSE OF NO AUTHORIZATION', (done) => {
                request(app)
                    .get('/products')
                    // .send({
                    //     headers: {
                    //         token: null
                    //     }
                    // })
                    .end((err, res) => {
                        console.log("ERROR FETCHING DATA");
                        // console.log(res);
                        console.log("RES BODY");
                        console.log(res.body, "<<<<< ERROR FETCH");
                        console.log(res.status, "<<<<< ERROR FETCH");
                        // expect(res.status).toBe(500)
                        // expect(res.body).toHaveProperty("message", expect.any(String))
                        // expect(res.body).toHaveProperty("errors", expect.any(Array))
                        done()
                    })
                
            })

        })


    }) */