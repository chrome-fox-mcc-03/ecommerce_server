    /* // ADD PRODUCT FAILS: NO NAME
        describe('ADD PRODUCT FAILS', () => {

            test('SHOULD SEND AN ERROR 400 BECAUSE OF EMPTY NAME', (done) => {
                let noName = {
                    ...testData
                }
                delete noName.name
                // console.log("SANITY CHECK");
                // console.log(noName);
                request(app)
                    .post('/products')
                    .send({
                        data: noName,
                        headers: {
                            token: testToken
                        }
                    })
                    .end((err, res) => {
                        // console.log(res);
                        // console.log("RES BODY");
                        // console.log(res.body);
                        // console.log(res.status);
                        expect(res.status).toBe(400)
                        expect(res.body).toHaveProperty("message", expect.any(String))
                        expect(res.body).toHaveProperty("errors", expect.any(Array))
                        done()
                    })

            })


            // NEGATIVE STOCK & PRICE
            test('SHOULD SEND AN ERROR 400 BECAUSE PRICE IS NEGATIVE', (done) => {
                let negPrice = {
                    ...testData,
                    price: -2000
                }
                // console.log("SANITY CHECK");
                // console.log(noName);
                request(app)
                    .post('/products')
                    .send({
                        data: negPrice,
                        headers: {
                            token: testToken
                        }
                    })
                    .end((err, res) => {
                        // console.log(res);
                        // console.log("RES BODY");
                        // console.log(res.body);
                        // console.log(res.status);
                        expect(res.status).toBe(400)
                        expect(res.body).toHaveProperty("message", expect.any(String))
                        expect(res.body).toHaveProperty("errors", expect.any(Array))
                        done()
                    })

            })

            test('SHOULD SEND AN ERROR 400 BECAUSE STOCK IS NEGATIVE', (done) => {
                let negStock = {
                    ...testData,
                    stock: -2000
                }
                // console.log("SANITY CHECK");
                // console.log(noName);
                request(app)
                    .post('/products')
                    .send({
                        data: negStock,
                        headers: {
                            token: testToken
                        }
                    })
                    .end((err, res) => {
                        // console.log(res);
                        // console.log("RES BODY");
                        // console.log(res.body);
                        // console.log(res.status);
                        expect(res.status).toBe(400)
                        expect(res.body).toHaveProperty("message", expect.any(String))
                        expect(res.body).toHaveProperty("errors", expect.any(Array))
                        done()
                    })

            })


            //NON-NUMERICAL FORMAT
            test('SHOULD SEND AN ERROR 400 BECAUSE PRICE IS NON-NUMERIC', (done) => {
                let nanPrice = {
                    ...testData,
                    price: 'i2000'
                }
                // console.log("SANITY CHECK");
                // console.log(noName);
                request(app)
                    .post('/products')
                    .send({
                        data: nanPrice,
                        headers: {
                            token: testToken
                        }
                    })
                    .end((err, res) => {
                        // console.log(res);
                        // console.log("RES BODY");
                        // console.log(res.body);
                        // console.log(res.status);
                        expect(res.status).toBe(400)
                        expect(res.body).toHaveProperty("message", expect.any(String))
                        expect(res.body).toHaveProperty("errors", expect.any(Array))
                        done()
                    })

            })

            test('SHOULD SEND AN ERROR 400 BECAUSE STOCK IS NON-NUMERIC', (done) => {
                let nanStock = {
                    ...testData,
                    stock: 'i200'
                }
                // console.log("SANITY CHECK");
                // console.log(noName);
                request(app)
                    .post('/products')
                    .send({
                        data: nanStock,
                        headers: {
                            token: testToken
                        }
                    })
                    .end((err, res) => {
                        // console.log(res);
                        // console.log("RES BODY");
                        // console.log(res.body);
                        // console.log(res.status);
                        expect(res.status).toBe(400)
                        expect(res.body).toHaveProperty("message", expect.any(String))
                        expect(res.body).toHaveProperty("errors", expect.any(Array))
                        done()
                    })

            })


        }) */